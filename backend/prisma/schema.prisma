generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  P
  A
}

// Modelo de usu√°rio
model users {
  id       String   @id @default(uuid()) @db.VarChar(40)
  name     String   @db.VarChar(150)
  email    String   @unique @db.VarChar(150)
  password String
  teaching_area String?       @db.VarChar(1000)
  education_level String?    @db.VarChar(1000)
  teaching_segment String?   @db.VarChar(1000)
  type     UserType
  student  students? 
  teacher  teachers? 
  feed_posts feed_posts[]
  event events[]
}

model events {
  id          String   @id @default(uuid()) @db.VarChar(40)
  date        DateTime @db.Date
  time        DateTime @db.Time
  description String   @db.VarChar(200)
  createdAt   DateTime @default(now()) @map("created_at")
  user_id     String    @db.VarChar(40)

  user users @relation(fields: [user_id], references: [id])
}

model messagesUser {
  id       String     @id @default(uuid())
  email    String     @unique @db.VarChar(150)
  sent     messages[] @relation("sentMessages")
  received messages[] @relation("messageRecipients")
}

model messages {
  id        String   @id @default(uuid())
  title     String   @db.VarChar(150)
  content   String
  createdAt DateTime @default(now())

  senderId String
  sender   messagesUser @relation("sentMessages", fields: [senderId], references: [id])

  recipients messagesUser[] @relation("messageRecipients")
  readBy     String[]       @default([])
}

model classes {
  id      Int       @id @default(autoincrement())
  name    String    @db.VarChar(50)
  students students[]
  teachers teachers[]
}

model students {
  id            Int       @id @default(autoincrement())
  name          String    @db.VarChar(100)
  email         String    @unique @db.VarChar(100)
  birth_date    DateTime?
  class_id      Int?
  created_at    DateTime  @default(now())
  user_id       String   @unique @db.VarChar(40)
  user          users    @relation(fields: [user_id], references: [id])
  class         classes?  @relation(fields: [class_id], references: [id])
  grades        grades[]
  attendance    attendance[]
  wellBeing     well_being_surveys[]
}

model teachers {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(100)
  email      String    @unique @db.VarChar(100)
  created_at DateTime  @default(now())
  user_id    String   @unique @db.VarChar(40)
  class_id   Int?
  user       users    @relation(fields: [user_id], references: [id])
  class      classes?  @relation(fields: [class_id], references: [id])
  grades     grades[]
  attendance attendance[]
}

model grades {
  id              Int       @id @default(autoincrement())
  student_id      Int
  subject         String
  grade           Decimal    @db.Decimal(5, 2)
  evaluation_date DateTime
  teacher_id      Int

  student students @relation(fields: [student_id], references: [id])
  teacher teachers  @relation(fields: [teacher_id], references: [id])
}

model attendance {
  id         Int      @id @default(autoincrement())
  student_id Int
  date       DateTime
  present    Boolean
  subject    String?
  teacher_id Int

  student students @relation(fields: [student_id], references: [id])
  teacher teachers  @relation(fields: [teacher_id], references: [id])
}

model well_being_surveys {
  id           Int       @id @default(autoincrement())
  user_id      Int
  submitted_at DateTime  @default(now())
  responses    Json

  student students @relation(fields: [user_id], references: [id])
}

model feed_posts {
  id         Int       @id @default(autoincrement())
  user_id    String    @db.VarChar(40)
  text       String
  image_url  String?
  created_at DateTime  @default(now())
  liked_by   Int[]     @default([])

  user users @relation(fields: [user_id], references: [id])
}
